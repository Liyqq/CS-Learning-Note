;主引导程序 Master Boot Record
;
;直接操作显卡文本模式对应显存，向其中写字符，不使用BIOS提供的子功能
;---------------------------------------------------------------------------
SECTION MBR vstart=0x7c00
    mov ax, cs
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov fs, ax
    mov sp, 0x7c00
    mov ax, 0xb800          ;显卡文本模式的起始地址
    mov gs, ax

;清屏利用BOIS提供的0x06号功能，上卷全部行，则可清屏。
;---------------------------------------------------------------------------
;INT 0x10  功能号：0x06  功能描述：上卷窗口
;---------------------------------------------------
;输入：
;AH 功能号=0x06
;AL = 上卷的行数（若为0，则表示全部行）
;BH = 上卷的行属性
;(CL, CH) = 窗口左上角的坐标(X, Y)
;(DL, DH) = 窗口右下角的坐标(X, Y)
;返回值： 无
    mov ax, 0x0600
    mov bx, 0x0700
    mov cx, 0x0000          ;左上角(0, 0)
    mov dx, 0x184f          ;右下角(80, 25)
                            ;VGA文本模式下，一行只能容纳80个字符，共25行
                            ;下标从0开始，则0x18=24,0x4f=79
    int 0x10
    
;;;;;;;;;; 直接向显卡内存文本模式区域写入字符 ;;;;;;;;;;
;显卡的文本模式中使用两个字节来表示一个屏幕上的字符。
;其中低字节为标准ASCII码，高字节用于控制字符的显示属性。
;
;low                                          high
; 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;|    Standard ASCII     |B  G  R  I  B  G  R  K |
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;高字节中低4位用于控制字符前景色，高4位用于控制字符背景色。
;I：表示字符显示的亮度,1表示高亮，相当于颜色变浅。
;K：表示字符是否闪烁，1表示闪烁。
;控制输出字符串"Hello MBR"
    mov byte [gs:0x00], 'H'
    mov byte [gs:0x01], 0xa4;(1010 0100)：a表示绿色背景并且字符闪烁，4表示前景色为红色

    mov byte [gs:0x02], 'e'
    mov byte [gs:0x03], 0xa4

    mov byte [gs:0x04], 'l'
    mov byte [gs:0x05], 0xa4

    mov byte [gs:0x06], 'l'
    mov byte [gs:0x07], 0xa4

    mov byte [gs:0x08], 'o'
    mov byte [gs:0x09], 0xa4

    mov byte [gs:0x0A], ' '
    mov byte [gs:0x0B], 0x7f;(0111 1111)：f表示白色背景字符不闪烁，0表示前景色为亮白色

    mov byte [gs:0x0C], 'M'
    mov byte [gs:0x0D], 0x9a;(1001 1010)：9表示蓝色背景并且字符闪烁，a表示前景色为浅渌色

    mov byte [gs:0x0E], 'B'
    mov byte [gs:0x0F], 0x9a

    mov byte [gs:0x10], 'R'
    mov byte [gs:0x11], 0x9a

;;;;;;;;;; 直接向显卡内存文本模式区域写入字符结束 ;;;;;;;;;;
    
    jmp $                   ;程序悬停于此

    times 510-($-$$) db 0   ;填充最后两字节前的空间
    db 0x55, 0xaa
    