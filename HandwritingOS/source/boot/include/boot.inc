;------------------- loader和kernel -------------------;
;内核加载器占用硬盘的扇区数
LOADER_CONSUMED_SECTOR_NUM equ 4

;内核加载器的扇区LBA地址：2扇区
LOADER_START_SECTOR_LBA_ADDR equ 0x02

;内核加载器被加载到内存后的开始内存地址
LOADER_BASE_MEM_ADDR equ 0x0900

;内核加载器栈顶地址
LOADER_STACK_TOP_MEM_ADDR equ LOADER_BASE_MEM_ADDR

;------------------- GDT段描述符格式 -------------------;
;该结构专门用来描述一个内存段，8字节大小(64位)
;高32位
; 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;| mem segment base addr |  |D |  |A |mem segment|  |     |  |           | mem segment base addr |
;|                       |G |/ |L |V |   limit   |P | DPL |S |    TYPE   |                       |
;|      31 ~ 24 bits     |  |B |  |L | 19~16 bits|  |     |  |           |      23 ~ 16 bits     |
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;G：Granularity粒度，用来指定段界限的单位大小。0表示1字节，1表示4KB。
;D/B：指示有效地址（段内偏移地址）及操作数的大小，这是为了兼容80286的保护模式设定的，
;    80286的保护模式下的操作数是16位。
;    D位：0表示指令中的有效地址和操作数是16位，指令有效地址用IP寄存器。
;        1表示指令中的有效地址及操作数是32位，指令有效地址用EIP寄存器。
;    B位：用来指定操作数大小，此操作数涉及到栈指针寄存器的选择及栈的地址上限。
;        0表示使用的是SP寄存器，栈的起始地址是16位寄存器的最大寻址范围0xFFFF。 
;        1表示使用的是ESP寄存器，栈的起始地址是32位寄存器的最大寻址范围0xFFFFFFFF。
;L：用于设置是否是64位代码段。1表示64位代码段，0表示32位代码段。
;AVL：AVaiLable，表示该内存段对用户是否可用。
;P：Present，即段是否存在。1表示段存在于内存中，否则P为0。常用于内存交换中。
;DPL：Descriptor Privilege Level，即描述符特权级，这是保护模式提供的安全解决方案，
;    分别是0、1、2、3级特权，数字越小，特权级越大。
;    操作系统应该处于最高的0特权级。用户程序通常处于权限最小的3特权级。
;S：指定内存段为系统段还是数据段，0表示系统段，1表示数据段。
;TYPE：和S字段配合在一起确定段描述符的确切类型，只有S字段的值确定后，TYPE字段的值才有具体意义。
;
;;低32位
; 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;|             mem segment base addr             |               mem segment limit               |
;|                                               |                                               |
;|                  15 ~ 0 bits                  |                   15 ~ 0 bits                 |
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;------------------- GDT段描述符属性 -------------------;
DESC_G_4K   equ    1__000_0000_0000_0000_0000_0000b
DESC_D_32   equ     1__00_0000_0000_0000_0000_0000b
DESC_L      equ      0__0_0000_0000_0000_0000_0000b     ;64位代码标记，此处标记为0即可。
DESC_AVL    equ        0__0000_0000_0000_0000_0000b     ;CPU不使用此位，置0即可。

DESC_LIMIT_CODE_H32  equ 1111__0000_0000_0000_0000b     ;段界限在高32位的部分，
                                                        ;与低32位中部分共同组成20位1
                                                        ;一起表示界限0xFFFFF
DESC_LIMIT_DATA_H32  equ DESC_LIMIT_CODE_H32            ;同上
DESC_LIMIT_VIDEO_H32 equ 0000__0000_0000_0000_0000b

DESC_P      equ              1__000_0000_0000_0000b     

DESC_DPL_0  equ               00__0_0000_0000_0000b
DESC_DPL_1  equ               01__0_0000_0000_0000b
DESC_DPL_2  equ               10__0_0000_0000_0000b
DESC_DPL_3  equ               11__0_0000_0000_0000b

DESC_S_SYS  equ                  0__0000_0000_0000b     ;系统段
DESC_S_CODE equ                  1__0000_0000_0000b     ;非系统段且指代码段
DESC_S_DATA equ  DESC_S_CODE                            ;非系统段且指数据段

DESC_TYPE_CODE  equ                1000__0000_0000b     ;x=1,c=,r=0,a=0
                                                        ;代码段是可执行的，非依从的，
                                                        ;不可读的，已访问位a清0。
DESC_TYPE_DATA  equ                0010__0000_0000b     ;x=0,c=,r=1,a=0
                                                        ;代码段是不可执行的，向上扩展的，
                                                        ;可写的，已访问位a清0。

;代码段描述符的高32位表示，其中(0x00 << 24表示最高8位的段基址值，
;由于我们采用的是平坦模型，故基址为0)，后面唯一可变的就是段界限值。
;定义代码段的高32位
DESC_CODE_HIGH32  equ   (0x00 << 24) + DESC_G_4K + DESC_D_32 + \
                        DESC_L + DESC_AVL + DESC_LIMIT_CODE_H32 + \
                        DESC_P + DESC_DPL_0 + DESC_S_CODE + \
                        DESC_TYPE_CODE + 0x00
;定义数据段的高32位
DESC_DATA_HIGH32  equ   (0x00 << 24) + DESC_G_4K + DESC_D_32 + \
                        DESC_L + DESC_AVL + DESC_LIMIT_DATA_H32 + \
                        DESC_P + DESC_DPL_0 + DESC_S_DATA + \
                        DESC_TYPE_DATA + 0x00

DESC_VIDEO_HIGH32 equ   (0x00 << 24) + DESC_G_4K + DESC_D_32 + \
                        DESC_L + DESC_AVL + DESC_LIMIT_VIDEO_H32 + \
                        DESC_P + DESC_DPL_0 + DESC_S_DATA + \
                        DESC_TYPE_DATA + 0x0b


;------------------- 段选择子属性 -------------------;
;选择子表示所需要的段的描述符在描述符表的位置，由这个位置再根据在GDTR中存储的描述符表基址
;就可以找到相应的描述符。
;用给出的选择子索引到描述符后，CPU自动从段描述符中取出段基址，再加上段内偏移地址，便凑成
;了“段基址：段内偏移地址”的形式的线性地址。
; 
;由于段寄存器是16位，所以选择子也是16位，其结构如下
; 15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
;+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
;|                  Descriptor Index                 |TI |  RPL  |
;+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
;RPL：表示请求特权级，有0、1、2、3四种特权级
;TI：即Table Indicator，用来指定选择子是在GDT中，还是LDT中。
;   0表示在GDT中索引描述符；
;   1表示在LDT中索引描述符。
;选择子的高13位，即第3~15位是描述符的索引值，相当于GDT的下标，最多可索引2^13=8192个段描述符。
SELECTOR_RPL_0   equ  00b
SELECTOR_RPL_1   equ  01b
SELECTOR_RPL_2   equ  10b
SELECTOR_RPL_3   equ  11b

SELECTOR_TI_GDT  equ  0_00b
SELECTOR_TI_LDT  equ  1_00b