;主引导程序 Master Boot Record
;
;将硬盘对应扇区的内核加载器(Kernel Loader)加载到对应内存并完成任务交接
;---------------------------------------------------------------------------
%include "boot.inc"
SECTION MBR vstart=0x7c00
    mov ax, cs
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov fs, ax
    mov sp, 0x7c00
    mov ax, 0xb800          ;显卡文本模式的起始地址
    mov gs, ax

;清屏利用BOIS提供的0x06号功能，上卷全部行，则可清屏。
;---------------------------------------------------------------------------
;INT 0x10  功能号：0x06  功能描述：上卷窗口
;---------------------------------------------------
;输入：
;AH 功能号=0x06
;AL = 上卷的行数（若为0，则表示全部行）
;BH = 上卷的行属性
;(CL, CH) = 窗口左上角的坐标(X, Y)
;(DL, DH) = 窗口右下角的坐标(X, Y)
;返回值： 无
    mov ax, 0x0600
    mov bx, 0x0700
    mov cx, 0x0000          ;左上角(0, 0)
    mov dx, 0x184f          ;右下角(80, 25)
                            ;VGA文本模式下，一行只能容纳80个字符，共25行
                            ;下标从0开始，则0x18=24,0x4f=79
    int 0x10

;;;;;;;;;; 直接向显卡内存文本模式区域写入字符 ;;;;;;;;;;
;显卡的文本模式中使用两个字节来表示一个屏幕上的字符。
;其中低字节为标准ASCII码，高字节用于控制字符的显示属性。
;
;low                                          high
; 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;|    Standard ASCII     |B  G  R  I  B  G  R  K |
;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;高字节中低4位用于控制字符前景色，高4位用于控制字符背景色。
;I：表示字符显示的亮度,1表示高亮，相当于颜色变浅。
;K：表示字符是否闪烁，1表示闪烁。
;控制输出字符串"Hello MBR"
    mov byte [gs:0x00], 'H'
    mov byte [gs:0x01], 0xa4;(1010 0100)：a表示绿色背景并且字符闪烁，4表示前景色为红色

    mov byte [gs:0x02], 'e'
    mov byte [gs:0x03], 0xa4

    mov byte [gs:0x04], 'l'
    mov byte [gs:0x05], 0xa4

    mov byte [gs:0x06], 'l'
    mov byte [gs:0x07], 0xa4

    mov byte [gs:0x08], 'o'
    mov byte [gs:0x09], 0xa4

    mov byte [gs:0x0A], ' '
    mov byte [gs:0x0B], 0x7f;(0111 1111)：f表示白色背景字符不闪烁，0表示前景色为亮白色

    mov byte [gs:0x0C], 'M'
    mov byte [gs:0x0D], 0x9a;(1001 1010)：9表示蓝色背景并且字符闪烁，a表示前景色为浅渌色

    mov byte [gs:0x0E], 'B'
    mov byte [gs:0x0F], 0x9a

    mov byte [gs:0x10], 'R'
    mov byte [gs:0x11], 0x9a

;;;;;;;;;; 直接向显卡内存文本模式区域写入字符结束 ;;;;;;;;;;

;;;;;;;;;; 载入内核加载器 ;;;;;;;;;;

    mov eax, LOADER_START_SECTOR_LBA_ADDR    ;起始扇区LBA地址
    mov bx, LOADER_BASE_MEM_ADDR             ;内核加载器加载到内存的基地址
    mov cx, LOADER_CONSUMED_SECTOR_NUM       ;待读取的扇区数
    call rd_disk_m_16                        ;读取内核加载器到BX指定内存

    jmp LOADER_BASE_MEM_ADDR                 ;跳转到内核加载器部分开始执行
;;;;;;;;;; 载入内核加载器结束 ;;;;;;;;;;


;;;--------------------------- 硬盘控制器端口号表 START ---------------------------;;;
;                                                                                
; +------------------+------------------+++------------------+------------------+
; |              IO porter              |||            porter usage             |
; +------------------+------------------+++------------------+------------------+
; | Primary channel  | Secondary channel|||       Read       |       Write      |
; +------------------+------------------+++------------------+------------------+
; |                                                                             |
; |                           Command Block registers                           |
; |                                                                             |
; +------------------+------------------+++------------------+------------------+
; |      0x1F0       |      0x170       |||       Data       |       Data       |
; +------------------+------------------+++------------------+------------------+
; |      0x1F1       |      0x171       |||      Error       |     Features     |
; +------------------+------------------+++------------------+------------------+
; |      0x1F2       |      0x172       |||   Sector count   |   Sector count   |
; +------------------+------------------+++------------------+------------------+
; |      0x1F3       |      0x173       |||      LBA low     |      LBA low     |
; +------------------+------------------+++------------------+------------------+
; |      0x1F4       |      0x174       |||      LBA mid     |      LBA mid     |
; +------------------+------------------+++------------------+------------------+
; |      0x1F5       |      0x175       |||      LBA high    |      LBA high    |                    |
; +------------------+------------------+++------------------+------------------+
; |      0x1F6       |      0x176       |||      Device      |      Device      |
; +------------------+------------------+++------------------+------------------+
; |      0x1F7       |      0x177       |||      Status      |     Command      |
; +------------------+------------------+++------------------+------------------+
; |                                                                             |
; |                           Control Block registers                           |
; |                                                                             |
; +------------------+------------------+++------------------+------------------+
; |      0x3F6       |      0x376       ||| Alternate status |  Device Control  |
; +------------------+------------------+++------------------+------------------+
;                                                                                
;;;---------------------------- 硬盘控制器端口号表 END ----------------------------;;;
;
;---------------------------------------------------
;功能：在16位模式下读取硬盘n个扇区
;输入：
;   EAX=LBA扇区号
;   BX=从硬盘读取的数据写入内存的开始地址
;   CX=从硬盘读取的扇区数
;输出：
;   BX指向内存地址
;
rd_disk_m_16:
;--------------------- START -----------------------
;备份操作:
        mov esi, eax        ;备份EAX，因为in/out指令会用到AL
        mov di, cx          ;备份CX，因为读取数据，计算读取次数时需要用到CX中扇区数

;读写硬盘:   
;第1步:设置要读取硬盘扇区数
        mov dx, 0x01f2      ;Sector count端口
        mov al, cl          ;传入端口的数据
        out dx, al          ;读取扇区数

        mov eax, esi        ;还原EAX，之后操作都需用到EAX传入的值

;第2步:将LBA地址送入LAB端口(0x01f3 ~ 0x1f6)
        ;LBA地址0 ~ 7位写入端口为0x01f3
        mov dx, 0x01f3
        out dx, al

        mov cl, 8           ;LBA寄存器为8位寄存器
        ;LBA地址8 ~ 15位写入端口为0x01f4
        shr eax, cl
        mov dx, 0x01f4
        out dx, al

        ;LBA地址16 ~ 23位写入端口为0x01f5
        shr eax, cl
        mov dx, 0x01f5
        out dx, al

        ;LBA地址14 ~ 27位写入端口为device(0x01f6)低4位
        shr eax, cl
        and al, 0x0f        ;取AL的低4位写入device端口低4位，
        or al, 0xe0         ;设置device高4位为0x0e(1110)，表示LBA模式
        mov dx, 0x01f6
        out dx, al

;第3步:向Command端口(0x01f7)写入读命令(0x20)
        mov dx, 0x01f7
        mov al, 0x20
        out dx, al

;第4步:检查硬盘状态
    .not_ready:
        ;Status端口(0x01f7)读时表示读取硬盘状态，写时表示写入命令
        nop
        in al, dx
        and al, 0x88        ;第4位为1表示硬盘控制器已准备好数据传输
                            ;第7位为1表示硬盘忙
                            ;0x88(1000 1000)
        cmp al, 0x08        ;0x08(0000 1000)
        jnz .not_ready      ;若未准备好，继续等待

;第5步:从Data端口(0x01f0)读取数据，一次读取1个字(2 bytes)
        ;计算读取次数
        mov ax, di          ;DI寄存器中备份有传入的CX中的扇区数
        mov dx, 256         ;一次读入2字节，一个扇区512字节，则一个扇区需要读256次
        mul dx              ;总共需要读取的次数=ax(di) * 256
        mov cx, ax

        ;读取数据
        mov dx, 0x01f0      
    .go_on_ready:
        in ax, dx
        mov [bx], ax        ;读入内存
        add bx, 2
        loop .go_on_ready

        ret
;---------------------- END ------------------------

    times 510-($-$$) db 0   ;填充最后两字节前的空间
    db 0x55, 0xaa
    